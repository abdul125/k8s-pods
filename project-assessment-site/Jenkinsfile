pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  namespace: jenkins
  labels:
    service_name: project-assessment-site
    service_type: REST
spec:
  containers:
  - name: dnd
    image: docker:latest
    command: 
    - cat
    tty: true
    volumeMounts: 
    - mountPath: /var/run/docker.sock
      name: docker-sock
    - name: vsecret
      mountPath: /etc/vsecret
      readOnly: true
  - name: kubectl
    image: bryandollery/terraform-packer-aws-alpine
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock  
      type: Socket
    volumes:
  - name: vsecret
    secret:
      secretName: mysecret
"""
    }
  }
  environment {
    DOCKER_NAMESPACE = 'abdul125'
    SERVICE_NAME = 'project-assessment-site'
    TOKEN=credentials('e84e85e2-912c-4e88-891b-7b7eefd8544a')
  }
  stages {
      stage("Build") {
          steps {
              container('dnd') {
                  sh '''
                      cd $SERVICE_NAME
		      ls -aAlth /root/
                      docker build --tag $DOCKER_NAMESPACE/$SERVICE_NAME .
                  '''
              }
          }
      }
      stage("Release") {
          steps {
              container('dnd') {
		      sh '''
		      docker login -u $DOCKER_NAMESPACE --password-stdin < /etc/vsecret/docker-token
                      docker push $DOCKER_NAMESPACE/$SERVICE_NAME
		    
		      # consider the following:
		      # WARNING! Using --password via the CLI is insecure. Use --password-stdin.

                  '''
              }
          }
      }
      stage("Deploy") {
          steps {
              container('kubectl') {
                  sh '''
                      cd $SERVICE_NAME
                      kubectl --token=$TOKEN -n test apply -f deploy.yaml -f service.yaml -f ingress.yaml
                      kubectl --token=$TOKEN -n test get all
                  '''
              }
          }
      }
  }
}
